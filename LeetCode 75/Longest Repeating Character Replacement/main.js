// URL: https://leetcode.com/problems/longest-repeating-character-replacement/

/**
 * @param {string} s
 * @param {number} k
 * @return {number}
 */
var characterReplacement = function (s, k) {
  // Make a map of size 26...
  var map = [26];
  // Initialize largestCount, maxlen & start pointer...
  let largestCount = 0,
    start = 0,
    maxlen = 0;
  // Traverse all characters through the loop...
  for (let end = 0; end < s.length; end++) {
    const c = s[end];
    map[c] = (map[c] || 0) + 1;
    // Get the largest count of a single, unique character in the current window...
    largestCount = Math.max(largestCount, map[c]);
    // We are allowed to have at most k replacements in the window...
    // So, if max character frequency + distance between start and end is greater than k...
    // this means we have considered changing more than k charactres. So time to shrink window...
    // Then there are more characters in the window than we can replace, and we need to shrink the window...
    if (end - start + 1 - largestCount > k) {
      // The main equation is: end - start + 1 - largestCount...
      map[s[start]] -= 1;
      start += 1;
    }
    // Get the maximum length of repeating character...
    maxlen = Math.max(maxlen, end - start + 1); // end - start + 1 = size of the current window...
  }
  return maxlen; // Return the maximum length of repeating character...
};

console.log(characterReplacement("ABAB", 2));
console.log(characterReplacement("AABABBA", 1));
